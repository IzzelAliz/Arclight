import io.izzel.arclight.gradle.tasks.RenameJarTask

plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'com.github.johnrengelman.shadow' version "${shadow_plugin_version}"
}

apply plugin: io.izzel.arclight.gradle.ArclightGradlePlugin

architectury {
    minecraft = minecraftVersion
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()
    accessWidenerPath = project(":arclight-common").loom.accessWidenerPath

    forge {
        useCustomMixin = false
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "mixins.arclight.forge.json"
    }
}

arclight {
    mcVersion = minecraftVersion
    forgeVersion = project.ext.forgeVersion
    bukkitVersion = 'v1_20_R3'
    accessTransformer = project(':arclight-common').file('bukkit.at')
    extraMapping = project(':arclight-common').file('extra_mapping.tsrg')
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraftVersion"
    mappings loom.officialMojangMappings()
    forge "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-forge:${architectury_version}"

    implementation("org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT") { transitive = false }
    implementation "io.izzel.arclight.generated:spigot:$minecraftVersion:deobf"
    implementation 'net.md-5:bungeecord-chat:1.16-R0.4'

    implementation("io.izzel.arclight:mixin-tools:$mixinToolsVersion") { transitive = false }
    annotationProcessor("io.izzel.arclight:mixin-tools:$mixinToolsVersion") { transitive = false }

    shadowCommon("org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT") { transitive = false }
    shadowCommon "io.izzel.arclight.generated:spigot:$minecraftVersion:deobf"
    shadowCommon('net.md-5:bungeecord-chat:1.20-R0.1') { transitive = false }

    implementation "io.izzel:tools:$toolsVersion"
    implementation "io.izzel.arclight:arclight-api:$apiVersion"
    implementation project(':i18n-config')

    common(project(path: ":arclight-common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":arclight-common", configuration: "transformProductionForge")) { transitive = false }
}

java {
    withSourcesJar()
}

jar {
    manifest.attributes 'MixinConnector': 'io.izzel.arclight.common.mod.ArclightConnector'
    manifest.attributes 'Implementation-Title': 'Arclight'
    manifest.attributes 'Implementation-Version': "arclight-$minecraftVersion-${project.version}-$gitHash"
    manifest.attributes 'Implementation-Vendor': 'Arclight Team'
    manifest.attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ss")
}

tasks.register('forgeMappings', Copy) {
    destinationDir = file("build/forge_mappings")
    from arclight.mappingsConfiguration.bukkitToForge
    from arclight.mappingsConfiguration.bukkitToForgeInheritance
}

project.sourceSets.main.output.dir file("build/forge_mappings"), builtBy: tasks.forgeMappings

processResources {
    def ver = "${project.version}+$gitHash"
    inputs.property 'version', ver

    filesMatching("META-INF/mods.toml") {
        expand "version": ver
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    enabled = false
}

tasks.register('reobfJar', RenameJarTask) {
    inputJar.set shadowJar.archiveFile
    archiveClassifier.set 'reobf'
    mappings = arclight.mappingsConfiguration.reobfBukkitPackage
}

tasks.register('srgJar', Jar) {
    from(tasks.shadowJar.outputs.files.collect { it.isDirectory() ? it : zipTree(it) }) {
        include 'io/izzel/**'
        exclude 'io/izzel/arclight/common/mixin/**'
        exclude 'io/izzel/arclight/forge/mixin/**'
    }
    archiveClassifier.set('srg')
    dependsOn shadowJar
}

tasks.register('spigotJar', RenameJarTask) {
    inputJar.set tasks.srgJar.archiveFile
    mappings = arclight.mappingsConfiguration.bukkitToForge
    reverse = true
    archiveClassifier.set('spigot')
    dependsOn tasks.srgJar
}

sourcesJar {
    def commonSources = project(":arclight-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

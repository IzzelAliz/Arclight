import io.izzel.arclight.gradle.tasks.UploadFilesTask

allprojects {
    apply plugin: 'java'

    group 'io.izzel.arclight'
    version '1.0.4-SNAPSHOT'

    def getGitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    ext {
        minecraftVersion = '1.20.4'
        supportedPlatforms = ['forge', 'neoforge', 'fabric']
        fabricLoaderVersion = '0.15.10'
        fabricApiVersion = '0.97.0+1.20.4'
        forgeVersion = '49.0.49'
        neoForgeVersion = '20.4.234'
        apiVersion = '1.6.3'
        toolsVersion = '1.3.0'
        mixinVersion = '0.8.5'
        mixinToolsVersion = '1.1.1'
        versionName = 'whisper'
        gitHash = getGitHash()
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = 'https://maven.neoforged.net/releases' }
        maven { url = 'https://files.minecraftforge.net/maven/' }
        maven { url = 'https://maven.izzel.io/releases' }
        maven { url = 'https://jitpack.io/' }
        mavenCentral()
    }

    tasks.register('cleanBuild') {
        doFirst {
            project.file("build/libs").deleteDir()
        }
    }
}

jar.enabled = false

tasks.register('collect', Copy) {
    destinationDir = file('build/libs')
    from project(':bootstrap').tasks.forgeJar.outputs
    from project(':bootstrap').tasks.neoforgeJar.outputs
    from project(':bootstrap').tasks.fabricJar.outputs
}

def gitBranch() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

tasks.register('uploadFiles', UploadFilesTask) {
    mcVersion.set project.ext.minecraftVersion
    version.set "${project.version}-${project.ext.gitHash}"
    snapshot.set project.version.toString().endsWith("-SNAPSHOT")
    gitHash.set project.ext.gitHash
    branch.set gitBranch()
    inputs.files tasks.collect.outputs.files
    dependsOn(tasks.collect)
}
